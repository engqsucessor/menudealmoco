ISSUE LOG â€“ CORS & FRONTEND/BACKEND INTEGRATION
================================================

Symptoms:
- Browser console: CORS error "No 'Access-Control-Allow-Origin' header" when calling http://localhost:8000/api/restaurants from frontend on http://localhost:3001 / 3003.
- Requests fail with TypeError: Failed to fetch.

Root Cause:
1. We changed CORS to allow_origins=["*"] while keep allow_credentials=True.
   Starlette/FastAPI intentionally does NOT send Access-Control-Allow-Origin when credentials are allowed and the origin list is ["*"]. So the browser still blocks.
2. Frontend expects API at VITE_API_URL or default 'http://localhost:8000/api'. That is correct.
3. Backend was starting/stopping because we manually re-invoked uv run; but the main functional blocker was the improper CORS configuration.

Fix Applied:
- Replaced wildcard CORS with an explicit generated list of localhost ports 3000-3009 (both localhost and 127.0.0.1) plus docker hostnames. See backend/app/main.py.
- This satisfies the credential rule and sends the proper Access-Control-Allow-Origin header.

Verification Steps:
1. Restart backend:
   uv run python run.py
2. From another terminal (PowerShell) test preflight & GET:
   curl -H "Origin: http://localhost:3003" -H "Access-Control-Request-Method: GET" -X OPTIONS http://localhost:8000/api/restaurants
   curl -H "Origin: http://localhost:3003" http://localhost:8000/health
3. You should see Access-Control-Allow-Origin: http://localhost:3003 in responses.
4. Reload frontend (npm run dev in frontend_1) and re-run search.

If Still Failing:
- Make sure only one backend instance is running (no stale container overriding code).
- Confirm VITE_API_URL not set incorrectly: echo %VITE_API_URL% (Windows) or check .env files.
- Clear browser cache/hard refresh (Ctrl+Shift+R).

Future Improvement:
- For production replace dynamic list with explicit allowed domain(s).

Status: CORS configuration corrected. Proceed with verification.

